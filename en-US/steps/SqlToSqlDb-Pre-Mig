<!--Pre-migration overview-->

As you prepare for migrating your SQL Server database to Azure SQL Database, be sure to consider the versions of SQL Server that are supported and to address any prerequisites. This will help to ensure an efficient and successful migration.

**Important**: Also be sure to check out the white paper [Choosing your database migration path to Azure](https://aka.ms/dbmigratewp) for additional information and recommendations.

### Supported versions

This section describes all supported scenarios and options for an upgrade from on-premise SQL Server versions to Azure SQL Database. This information is current as of September 2018.

The following SQL Server sources are included:
* SQL Server 2005
* SQL Server 2008 and SQL Server 2008 R2
* SQL Server 2012
* SQL Server 2014
* SQL Server 2016
* SQL Server 2017

You can migrate SQL Server running on-premises or on:

* SQL Server on Virtual Machines
* Amazon Web Services (AWS) EC2
* Compute Engine (GCP)
* AWS RDS

The following Azure target is included:
* Azure SQL Database

The following data migration options are discussed:
*	Transactional replication
*	Database migration toolset [Azure Database Migration Service (DMS) and Data Migration Assistant (DMA)]
*	Bulk load

#### From SQL Server 2005
*	**Migration tools**: Migration is supported by Azure DMS and DMA.
*	**Bulk load**: Tables can be bulk copied out from SQL Server 2005 and then bulk copied into Azure SQL Database.

#### From SQL Server 2008 or SQL Server 2008 R2
*	**Migration tools**: Migration is supported by Azure DMS and DMA.
*	**Bulk load**: Tables can be bulk copied out from SQL Server 2008 or SQL Server 2008 R2 and then bulk copied into Azure SQL Database.

#### From SQL Server 2012
*	**Transactional replication**: Transactional replication from SQL Server 2012 to Azure SQL Database is supported; SQL Server 2012 version needs to be SP2 CU8 or SP3 or later.
*	**Migration tools**: Migration is supported by Azure DMS and DMA.
*	**Bulk load**: Tables can be bulk copied out from SQL Server 2012 and then bulk copied into Azure SQL Database.

#### From SQL Server 2014
*	**Transactional replication**: Transactional replication from SQL Server 2014 to Azure SQL Database is supported; SQL Server 2014 version needs to be RTM CU10 or later, or SP1 CU3 or later.
*	**Migration tools**: Migration is supported by Azure DMS and DMA.
*	**Bulk load**: Tables can be bulk copied out from SQL Server 2014 and then bulk copied into Azure SQL Database.

#### From SQL Server 2016
*	**Transactional replication**: Transactional replication from SQL Server 2016 to Azure SQL Database is supported.
*	**Migration tools**: Migration is supported by Azure DMS and DMA.
*	**Bulk load**: Tables can be bulk copied out from SQL Server 2016 and then bulk copied into Azure SQL Database.

#### From SQL Server 2017
*	**Transactional replication**: Transactional replication from SQL Server 2017 to Azure SQL Database is supported.
*	**Bulk load**: Tables can be bulk copied out from SQL Server 2017 and then bulk copied into Azure SQL Database.

### Additional resources

- [SQL migration using Azure Data Migration Service (DMS)](https://www.microsoft.com/handsonlabs/SelfPacedLabs/?storyGuid=3b671509-c3cd-4495-8e8f-354acfa09587) hands-on lab.
- Be sure to check out the [Azure Total Cost of Ownership (TCO) Calculator](https://aka.ms/azure-tco) to help estimate the cost savings you can realize by migrating your workloads to Azure.
- For a matrix of the Microsoft and third-party services and tools that are available to assist you with various database and data migration scenarios as well as specialty tasks, see the article [Service and tools for data migration](https://docs.microsoft.com/azure/dms/dms-tools-matrix).

### Migration learnings and best practices from real-world engagements

For additional assistance with completing this migration scenario, please see the following resources, which were developed in support of a real-world migration project engagement.

<br>
<table width="100%">
<thead>
<tr>
<td width="18%">
<p><strong>Title/link</strong></p>
</td>
<td width="59%">
<p><strong>Description</strong></p>
</td>
</tr>
</thead>
<tbody>
<tr>
<td width="18%">
<p><a href="https://github.com/Microsoft/DataMigrationTeam/tree/master/IP%20and%20Scripts/MoveLogins">Utility to move On-Premises SQL Server Logins to Azure SQL DB</a></p>
</td>
<td width="59%">
<p>A PowerShell script that creates a T-SQL command script to re-create logins and select database users from an “on premises” SQL Server to an Azure SQL PaaS service. The tool allows the automatic mapping of Windows AD accounts to Azure AD accounts or it can do UPN lookups for each login against the on premises Windows Active Directory. The tool optionally moves SQL Server native logins as well. Custom server and database roles are scripted, as well as role membership and database role and user permissions. Contained databases are yet not supported and only a subset of possible SQL Server permissions are scripted; i.e. permissions grant with grant are not supported (complex permission trees). More details are available in the support document and the script have comments for ease of understanding.</p>
</td>
</tr>
<tr>
<td width="18%">
<p><a href="https://github.com/Microsoft/DataMigrationTeam/tree/master/Data%20Workload%20Assessment%20Model%20and%20Tool">Data Workload Assessment Model and Tool</a></p>
</td>
<td width="59%">
<p>This tool provides suggested &ldquo;best fit&rdquo; target platforms, cloud readiness, and application/database remediation level for a given workload. It offers simple, one-click calculation and report generation that greatly helps to accelerate large estate assessments by providing and automated and uniform target platform decision process.</p>
</td>
</tr>
<tr>
<td width="18%">
<p><a href="https://github.com/Microsoft/DataMigrationTeam/tree/master/Bulk%20Database%20Creation%20with%20PowerShell">Bulk Database Creation with PowerShell</a></p>
</td>
<td width="59%">
<p>Three scripts that create a resource group (create_rg.ps1), SQL Server to host Azure SQL Databases (create_sqlserver.ps1), and Azure SQL Databases (create_sqldb.ps1). The scripts include loop capabilities, so you can iterate and create as many databases and SQL Servers as necessary.</p>
</td>
</tr>
<tr>
<td width="18%">
<p><a href="https://github.com/Microsoft/DataMigrationTeam/tree/master/Bulk%20Schema%20Deployment%20with%20MSSQL-Scripter%20&amp;%20PowerShell">Bulk Schema Deployment with MSSQL-Scripter &amp; PowerShell</a></p>
</td>
<td width="59%">
<p>This asset creates a resource group, one or multiple SQL Servers to host one or multiple Azure SQL Databases, exports every schema from an on-premises SQL Server (or multiple SQL Servers (2005+) (or VM), and imports it to Azure SQL Database.&nbsp;</p>
</td>
</tr>
</tbody>
</table>

**Note**: These resources were developed as part of the Data Migration Jumpstart Program (DM Jumpstart), which is sponsored by the Azure Data Group engineering team. The core charter DM Jumpstart is to unblock and accelerate complex modernization and compete data platform migration opportunities to Microsoft’s Azure Data platform. If you think your organization would be interested in participating in the DM Jumpstart program, please contact your account team and ask that they submit a nomination.

### Prerequisites

Before beginning your migration project, it is important to address the associated prerequisites.

If your source database is running SQL Server on-premises or on SQL Server on Virtual Machines, the following prerequisites apply:

* Enable the TCP/IP protocol, which is disabled by default during SQL Server Express installation, by following the instructions in the article [Enable or Disable a Server Network Protocol](https://docs.microsoft.com/sql/database-engine/configure-windows/enable-or-disable-a-server-network-protocol#SSMSProcedure).
* Create an instance of Azure SQL Database instance, which you do by following the detail in the article [Create an Azure SQL database in the Azure portal](https://docs.microsoft.com/azure/sql-database/sql-database-get-started-portal).
* Download and install the [Data Migration Assistant](https://www.microsoft.com/download/details.aspx?id=53595) v3.3 or later.
* Create a VNET for the Azure Database Migration Service by using the Azure Resource Manager deployment model, which provides site-to-site connectivity to your on-premises source servers by using either ExpressRoute (see the article [ExpressRoute Overview](https://docs.microsoft.com/azure/expressroute/expressroute-introduction)) or VPN (see the article [What is VPN gateway](https://docs.microsoft.com/azure/vpn-gateway/vpn-gateway-about-vpngateways)).
* Ensure that your Azure Virtual Network (VNET) Network Security Group rules do not block the following communication ports 443, 53, 9354, 445, 12000. For more detail on Azure VNET NSG traffic filtering, see the article [Filter network traffic with network security groups](https://docs.microsoft.com/en-us/azure/virtual-network/virtual-networks-nsg).
* Configure your Windows Firewall for database engine access by following the steps in the article [Configure a Windows Firewall for Database Engine Access](https://docs.microsoft.com/sql/database-engine/configure-windows/configure-a-windows-firewall-for-database-engine-access).
* Open your Windows firewall to allow the Azure Database Migration Service to access the source SQL Server, which by default is TCP port 1433.
* If you are running multiple named SQL Server instances using dynamic ports, you may wish to enable the SQL Browser Service and allow access to UDP port 1434 through your firewalls so that the Azure Database Migration Service can connect to a named instance on your source server.
* When using a firewall appliance in front of your source database(s), you may need to add firewall rules to allow the Azure Database Migration Service to access the source database(s) for migration.
* Create a server-level firewall rule using the steps in the article [Azure SQL Database and SQL Data Warehouse firewall rules](https://docs.microsoft.com/azure/sql-database/sql-database-firewall-configure) for the Azure SQL Database server to allow the Azure Database Migration Service access to the target databases. Provide the subnet range of the VNET used for the Azure Database Migration Service.
* Ensure that the credentials used to connect to source SQL Server instance have CONTROL SERVER permissions. See the article [GRANT Server Permissions (Transact-SQL)](https://docs.microsoft.com/sql/t-sql/statements/grant-server-permissions-transact-sql) for more information.
* Ensure that the credentials used to connect to target Azure SQL Database instance have CONTROL DATABASE permission on the target Azure SQL databases.
